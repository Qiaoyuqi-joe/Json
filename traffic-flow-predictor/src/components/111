<template>
  <div id="map" class="map-container"></div>
</template>

<script>
import AMapLoader from "@amap/amap-jsapi-loader";
import { ref, onMounted, watch, computed } from "vue";
import { useStore } from "vuex";

export default {
  name: "GeoMap",
  props: {
    searchQuery: {
      type: String,
      required: false,
    },
  },
  setup(props) {
    const store = useStore(); // 使用 Vuex store
    const map = ref(null); // 地图对象
    let AMap = null; // 高德地图 API
    let marker = null; // 地图标记
    let placeSearch = null; // 高德地图 PlaceSearch 实例

    let loca = null; // 在 setup 函数顶部定义
    let pulseLinkLayer = null;
    let geoSource = null;

    const current_position = computed(() => store.state.current_position); // 当前地图中心
    const path = computed(() => store.state.path); // 路径

    // 地图初始化
    const initMap = () => {
      window._AMapSecurityConfig = {
        securityJsCode: "934e3abdf65d36a21caae3a069789da3", // 保留安全密钥
      };

      AMapLoader.load({
        key: "7778b36918b20db096abc451498af897", // 保留API密钥
        version: "2.0",
        plugins: [
          "AMap.ToolBar",
          "AMap.Scale",
          "AMap.HawkEye",
          "AMap.MapType",
          "AMap.MouseTool",
          "AMap.PlaceSearch",
          "AMap.ControlBar",
          // 保留 ControlBar 插件
        ],
        Loca: {
          version: "2.0.0",
          // Loca 插件版本
        },
      })
        .then((AMapInstance) => {
          AMap = AMapInstance;

          // 创建地图实例并设置3D视图
          var map = new AMap.Map("map", {
            center: current_position.value.length
              ? current_position.value
              : [116.358145, 39.961495], // 如果有当前位置，使用当前位置作为中心
            zoom: 18,
            pitch: 50,
            rotation: -15,
            viewMode: "3D", // 保留 3D 视图
            zooms: [2, 20], // 缩放范围
          });

          // 等待地图加载完成后，再初始化 Loca
          map.value.on("complete", () => {
            console.log("地图加载完成");
            loca = new AMap.Loca.Container({
              map: map.value, // 传入高德地图实例
            });

            // 确保 Loca 容器初始化完成后再绘制脉冲线
            addPulseLine();
          });

          // 添加工具栏和控制条
          const toolBar = new AMap.ToolBar();
          const controlBar = new AMap.ControlBar();
          map.value.addControl(toolBar);
          map.value.addControl(controlBar);

          // 初始化 PlaceSearch
          placeSearch = new AMap.PlaceSearch({
            map: map.value,
          });

          // 初始化标记
          addMarker();
        })

        .catch((error) => {
          console.error("AMap 加载错误:", error);
        });
    };

    // 监听搜索框内容变化并执行搜索
    watch(
      () => props.searchQuery,
      (newQuery) => {
        if (newQuery && placeSearch) {
          placeSearch.search(newQuery, (status, result) => {
            if (status === "complete" && result.info === "OK") {
              const poi = result.poiList.pois[0];
              if (poi && poi.location) {
                const lnglat = poi.location;
                current_position.value = [lnglat.lng, lnglat.lat];
                store.dispatch("updateCurrentPosition", current_position.value); // 更新 Vuex 中的当前位置
                map.value.setCenter(current_position.value);
                addMarker();
              }
            } else {
              console.error("搜索失败或无结果", result);
            }
          });
        }
      },
    );
    // 添加标记
    const addMarker = () => {
      if (!AMap || !map.value) return;

      // 如果已经有标记，移除旧标记
      if (marker) {
        marker.setMap(null);
      }

      // 创建新的标记并添加到地图
      marker = new AMap.Marker({
        position: current_position.value,
        icon: new AMap.Icon({
          size: new AMap.Size(40, 50), // 设置图标大小 (宽度40px, 高度50px)
          image: "/station-icon.png", // 图标图片路径
          imageSize: new AMap.Size(40, 50), // 保证图标图片大小和显示大小一致
        }),
        offset: new AMap.Pixel(-13, -26),
      });

      marker.setMap(map.value);
    };

    // 绘制脉冲线
    const addPulseLine = () => {
      if (!AMap || !map.value || !loca) return;

      // 如果已经有脉冲线图层，先移除
      if (pulseLinkLayer) {
        loca.remove(pulseLinkLayer);
      }

      // 创建 GeoJSON 数据源
      geoSource = new AMap.Loca.GeoJSONSource({
        data: {
          type: "FeatureCollection",
          features: [
            {
              type: "Feature",
              geometry: {
                type: "LineString",
                coordinates: path.value, // 使用 Vuex 中的路径数据
              },
              properties: {
                distance: 5000,
              },
            },
          ],
        },
      });

      // 创建脉冲线图层
      pulseLinkLayer = new AMap.Loca.PulseLinkLayer({
        loca: loca, // 传入 Loca 容器
        zIndex: 10,
        opacity: 1,
        visible: true,
        zooms: [2, 22],
      });

      pulseLinkLayer.setSource(geoSource);

      pulseLinkLayer.setStyle({
        unit: "meter",
        dash: [40000, 0, 40000, 0],
        lineWidth: () => [20000, 1000], // 移除了 index 参数
        height: () => Math.random() * 20000 + 10, // 移除了 index 和 feat 参数
        smoothSteps: 30,
        speed: () => Math.random() * 200000 + 1000, // 移除了 index 和 prop 参数
        flowLength: 100000,
        lineColors: () => [
          "rgb(255,228,105)",
          "rgb(255,164,105)",
          "rgba(1, 34, 249,1)",
        ], // 移除了 index 和 feat 参数
        maxHeightScale: 0.3,
        headColor: "rgba(255, 255, 0, 1)",
        trailColor: "rgba(255, 255,0,0)",
      });

      // 添加脉冲线图层到 Loca 容器
      loca.add(pulseLinkLayer);

      // 启动 Loca 动画
      loca.animate.start();
    };

    // 监听 current_position 和 path 变化并更新地图
    watch(current_position, () => {
      if (map.value) {
        map.value.setCenter(current_position.value); // 更新地图中心
        addMarker(); // 更新标记
      }
    });

    watch(
      path,
      (newPath) => {
        if (pulseLinkLayer && geoSource) {
          geoSource.setData({
            type: "FeatureCollection",
            features: [
              {
                type: "Feature",
                geometry: {
                  type: "LineString",
                  coordinates: newPath, // 使用更新后的路径
                },
                properties: {
                  distance: 5000,
                },
              },
            ],
          });
        } else {
          // 如果图层尚未初始化，调用初始化函数
          addPulseLine();
        }
      },
      { deep: true },
    );

    // 地图初始化
    onMounted(() => {
      initMap();
    });

    return {
      map,
    };
  },
};
</script>
